# Heinlein Support SLAC 2024 - Workshop - Sichere Mailcluster mit Rspamd und Spamhaus DQS
# https://github.com/HeinleinSupport/rspamd-slac-2024
#

rules {
  # reject the mail if an antivirus scanner found a threat
  VIRUS_REJECT {
    action = "reject";
    # expression = "GROUP_VIRUS_REJECT";
    # Abweichend aus dem Workshop - bei einem FP match nicht rejecten
    expression = "GROUP_VIRUS_REJECT & !CLAMAV_EXCLUDE_SHA256";
    message = "REJECT - virus found (support-id: ${queueid}-${uid.substring(1, 6)})";
    require_action = ["no action", "greylist", "reject", "add header", "soft reject", "rewrite subject", "discard", "quarantine"];
  }
  # reject the mail if the phishing detection in AV or Rspamd hits
  PHISHING_REJECT {
    action = "reject";
    expression = "GROUP_PHISHING_REJECT & !SPAMTRAP_SCORE";
    message = "REJECT - BAD content found (support-id: ${queueid}-${uid.substring(1, 6)})";
    require_action = ["no action", "greylist", "reject", "add header", "soft reject", "rewrite subject", "discard", "quarantine"];
  }
  # reject the mail if an antivirus scanner or oletools found a potential bad vba macro
  MACRO_VIRUS_REJECT {
    action = "reject";
    expression = "GROUP_MACRO_VIRUS_REJECT & !SPAMTRAP_SCORE";
    message = "REJECT - BAD office macro file found (support-id: ${queueid}-${uid.substring(1, 6)})";
    require_action = ["no action", "greylist", "reject", "add header", "soft reject", "rewrite subject", "discard", "quarantine"];
  }
  # reject mails with Eicar test virus
  VIRUS_JUST_EICAR_REJECT {
    action = "reject";
    expression = "GROUP_VIRUS_JUST_EICAR";
    message = "REJECT - you have send the Eicar Virus test string, so I better reject this mail :) (support-id: ${queueid}-${uid.substring(1, 6)})";
    require_action = ["no action", "greylist", "reject", "add header", "soft reject", "rewrite subject", "discard", "quarantine"];
  }

  # reject file extensions based on multimap matches
  # --> in production systems you should reject banned extensions incoming and outgoing ;)
  BANNED_EXTENSIONS {
    action = "reject";
    expression = "INCOMING & BANNED_EXTENSIONS & !WL_RCPT_BANNED_EXTENSIONS";
    message = "REJECT - policy violation - attachment type is forbidden (support-id: ${queueid}-${uid.substring(1, 6)})";

  }

  # reject mail if sender matches any multimap block list
  SENDER_BLOCKLIST {
    action = "reject";
    expression = "SENDER_DOMAIN_BLOCKLIST | SENDER_IP_BLOCKLIST";
    message = "REJECT - sender on blocklist (support-id: ${queueid}-${uid.substring(1, 6)})";
  }

  # rewrite subject of mails with DMARC verification failures
  DMARC_FAIL_REJECT {
    action = "reject";
    expression = "(DMARC_POLICY_REJECT | DMARC_POLICY_QUARANTINE) & !WL_DMARC_FAIL_FROM";
  }


  # ratelimit rules
  RATELIMIT_REJECT {
    action = "reject";
    expression = "GROUP_RATELIMIT_REJECT & !RATELIMIT_EXCLUDELIST";
    message = "REJECT - limits exceeded (support-id: ${queueid}-${uid.substring(1, 6)})";
    require_action = ["no action", "greylist", "reject", "add header", "soft reject", "rewrite subject", "discard", "quarantine"];
  }

  RATELIMIT_DEFER {
    action = "soft reject";
    expression = "GROUP_RATELIMIT_DEFER & !RATELIMIT_EXCLUDELIST";
    message = "DEFER - limits exceeded (support-id: ${queueid}-${uid.substring(1, 6)})";
    honor_action = ["reject"];
  }

  RATELIMIT_HOLD {
    action = "hold";
    expression = "GROUP_RATELIMIT_HOLD & !RATELIMIT_EXCLUDELIST";
    honor_action = ["reject"];
  }

  # PEEKABOO_IN_PROCESS {
  #     action = "soft reject";
  #     message = "SOFT REJECT - try again later #412 (support-id: ${queueid}-${uid.substring(1, 6)}";
  #     expression = "PEEKABOO_IN_PROCESS";
  #     honor_action = ["reject"];
  # }

}
